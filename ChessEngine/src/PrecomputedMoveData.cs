
namespace ChessEngine.src
{
    public class PrecomputedMoveData
    {
        public static readonly int[][] numSquaresToEdge =
        {
            new int[] { 0, 7, 0, 7, 0, 7, 0, 0, },
            new int[] { 0, 7, 1, 6, 0, 6, 0, 1, },
            new int[] { 0, 7, 2, 5, 0, 5, 0, 2, },
            new int[] { 0, 7, 3, 4, 0, 4, 0, 3, },
            new int[] { 0, 7, 4, 3, 0, 3, 0, 4, },
            new int[] { 0, 7, 5, 2, 0, 2, 0, 5, },
            new int[] { 0, 7, 6, 1, 0, 1, 0, 6, },
            new int[] { 0, 7, 7, 0, 0, 0, 0, 7, },
            new int[] { 1, 6, 0, 7, 0, 6, 1, 0, },
            new int[] { 1, 6, 1, 6, 1, 6, 1, 1, },
            new int[] { 1, 6, 2, 5, 1, 5, 1, 2, },
            new int[] { 1, 6, 3, 4, 1, 4, 1, 3, },
            new int[] { 1, 6, 4, 3, 1, 3, 1, 4, },
            new int[] { 1, 6, 5, 2, 1, 2, 1, 5, },
            new int[] { 1, 6, 6, 1, 1, 1, 1, 6, },
            new int[] { 1, 6, 7, 0, 1, 0, 0, 6, },
            new int[] { 2, 5, 0, 7, 0, 5, 2, 0, },
            new int[] { 2, 5, 1, 6, 1, 5, 2, 1, },
            new int[] { 2, 5, 2, 5, 2, 5, 2, 2, },
            new int[] { 2, 5, 3, 4, 2, 4, 2, 3, },
            new int[] { 2, 5, 4, 3, 2, 3, 2, 4, },
            new int[] { 2, 5, 5, 2, 2, 2, 2, 5, },
            new int[] { 2, 5, 6, 1, 2, 1, 1, 5, },
            new int[] { 2, 5, 7, 0, 2, 0, 0, 5, },
            new int[] { 3, 4, 0, 7, 0, 4, 3, 0, },
            new int[] { 3, 4, 1, 6, 1, 4, 3, 1, },
            new int[] { 3, 4, 2, 5, 2, 4, 3, 2, },
            new int[] { 3, 4, 3, 4, 3, 4, 3, 3, },
            new int[] { 3, 4, 4, 3, 3, 3, 3, 4, },
            new int[] { 3, 4, 5, 2, 3, 2, 2, 4, },
            new int[] { 3, 4, 6, 1, 3, 1, 1, 4, },
            new int[] { 3, 4, 7, 0, 3, 0, 0, 4, },
            new int[] { 4, 3, 0, 7, 0, 3, 4, 0, },
            new int[] { 4, 3, 1, 6, 1, 3, 4, 1, },
            new int[] { 4, 3, 2, 5, 2, 3, 4, 2, },
            new int[] { 4, 3, 3, 4, 3, 3, 4, 3, },
            new int[] { 4, 3, 4, 3, 4, 3, 3, 3, },
            new int[] { 4, 3, 5, 2, 4, 2, 2, 3, },
            new int[] { 4, 3, 6, 1, 4, 1, 1, 3, },
            new int[] { 4, 3, 7, 0, 4, 0, 0, 3, },
            new int[] { 5, 2, 0, 7, 0, 2, 5, 0, },
            new int[] { 5, 2, 1, 6, 1, 2, 5, 1, },
            new int[] { 5, 2, 2, 5, 2, 2, 5, 2, },
            new int[] { 5, 2, 3, 4, 3, 2, 4, 2, },
            new int[] { 5, 2, 4, 3, 4, 2, 3, 2, },
            new int[] { 5, 2, 5, 2, 5, 2, 2, 2, },
            new int[] { 5, 2, 6, 1, 5, 1, 1, 2, },
            new int[] { 5, 2, 7, 0, 5, 0, 0, 2, },
            new int[] { 6, 1, 0, 7, 0, 1, 6, 0, },
            new int[] { 6, 1, 1, 6, 1, 1, 6, 1, },
            new int[] { 6, 1, 2, 5, 2, 1, 5, 1, },
            new int[] { 6, 1, 3, 4, 3, 1, 4, 1, },
            new int[] { 6, 1, 4, 3, 4, 1, 3, 1, },
            new int[] { 6, 1, 5, 2, 5, 1, 2, 1, },
            new int[] { 6, 1, 6, 1, 6, 1, 1, 1, },
            new int[] { 6, 1, 7, 0, 6, 0, 0, 1, },
            new int[] { 7, 0, 0, 7, 0, 0, 7, 0, },
            new int[] { 7, 0, 1, 6, 1, 0, 6, 0, },
            new int[] { 7, 0, 2, 5, 2, 0, 5, 0, },
            new int[] { 7, 0, 3, 4, 3, 0, 4, 0, },
            new int[] { 7, 0, 4, 3, 4, 0, 3, 0, },
            new int[] { 7, 0, 5, 2, 5, 0, 2, 0, },
            new int[] { 7, 0, 6, 1, 6, 0, 1, 0, },
            new int[] { 7, 0, 7, 0, 7, 0, 0, 0, },
        };

        public static readonly (bool, int)[][] knightMoveTable =
        {
            new (bool, int)[] { (false, -15), (false, -6), (true, 10), (true, 17), (false, 15), (false, 6), (false, -10), (false, -17), },
            new (bool, int)[] { (false, -14), (false, -5), (true, 11), (true, 18), (true, 16), (false, 7), (false, -9), (false, -16), },
            new (bool, int)[] { (false, -13), (false, -4), (true, 12), (true, 19), (true, 17), (true, 8), (false, -8), (false, -15), },
            new (bool, int)[] { (false, -12), (false, -3), (true, 13), (true, 20), (true, 18), (true, 9), (false, -7), (false, -14), },
            new (bool, int)[] { (false, -11), (false, -2), (true, 14), (true, 21), (true, 19), (true, 10), (false, -6), (false, -13), },
            new (bool, int)[] { (false, -10), (false, -1), (true, 15), (true, 22), (true, 20), (true, 11), (false, -5), (false, -12), },
            new (bool, int)[] { (false, -9), (false, 0), (false, 16), (true, 23), (true, 21), (true, 12), (false, -4), (false, -11), },
            new (bool, int)[] { (false, -8), (false, 1), (false, 17), (false, 24), (true, 22), (true, 13), (false, -3), (false, -10), },
            new (bool, int)[] { (false, -7), (true, 2), (true, 18), (true, 25), (false, 23), (false, 14), (false, -2), (false, -9), },
            new (bool, int)[] { (false, -6), (true, 3), (true, 19), (true, 26), (true, 24), (false, 15), (false, -1), (false, -8), },
            new (bool, int)[] { (false, -5), (true, 4), (true, 20), (true, 27), (true, 25), (true, 16), (true, 0), (false, -7), },
            new (bool, int)[] { (false, -4), (true, 5), (true, 21), (true, 28), (true, 26), (true, 17), (true, 1), (false, -6), },
            new (bool, int)[] { (false, -3), (true, 6), (true, 22), (true, 29), (true, 27), (true, 18), (true, 2), (false, -5), },
            new (bool, int)[] { (false, -2), (true, 7), (true, 23), (true, 30), (true, 28), (true, 19), (true, 3), (false, -4), },
            new (bool, int)[] { (false, -1), (false, 8), (false, 24), (true, 31), (true, 29), (true, 20), (true, 4), (false, -3), },
            new (bool, int)[] { (false, 0), (false, 9), (false, 25), (false, 32), (true, 30), (true, 21), (true, 5), (false, -2), },
            new (bool, int)[] { (true, 1), (true, 10), (true, 26), (true, 33), (false, 31), (false, 22), (false, 6), (false, -1), },
            new (bool, int)[] { (true, 2), (true, 11), (true, 27), (true, 34), (true, 32), (false, 23), (false, 7), (true, 0), },
            new (bool, int)[] { (true, 3), (true, 12), (true, 28), (true, 35), (true, 33), (true, 24), (true, 8), (true, 1), },
            new (bool, int)[] { (true, 4), (true, 13), (true, 29), (true, 36), (true, 34), (true, 25), (true, 9), (true, 2), },
            new (bool, int)[] { (true, 5), (true, 14), (true, 30), (true, 37), (true, 35), (true, 26), (true, 10), (true, 3), },
            new (bool, int)[] { (true, 6), (true, 15), (true, 31), (true, 38), (true, 36), (true, 27), (true, 11), (true, 4), },
            new (bool, int)[] { (true, 7), (false, 16), (false, 32), (true, 39), (true, 37), (true, 28), (true, 12), (true, 5), },
            new (bool, int)[] { (false, 8), (false, 17), (false, 33), (false, 40), (true, 38), (true, 29), (true, 13), (true, 6), },
            new (bool, int)[] { (true, 9), (true, 18), (true, 34), (true, 41), (false, 39), (false, 30), (false, 14), (false, 7), },
            new (bool, int)[] { (true, 10), (true, 19), (true, 35), (true, 42), (true, 40), (false, 31), (false, 15), (true, 8), },
            new (bool, int)[] { (true, 11), (true, 20), (true, 36), (true, 43), (true, 41), (true, 32), (true, 16), (true, 9), },
            new (bool, int)[] { (true, 12), (true, 21), (true, 37), (true, 44), (true, 42), (true, 33), (true, 17), (true, 10), },
            new (bool, int)[] { (true, 13), (true, 22), (true, 38), (true, 45), (true, 43), (true, 34), (true, 18), (true, 11), },
            new (bool, int)[] { (true, 14), (true, 23), (true, 39), (true, 46), (true, 44), (true, 35), (true, 19), (true, 12), },
            new (bool, int)[] { (true, 15), (false, 24), (false, 40), (true, 47), (true, 45), (true, 36), (true, 20), (true, 13), },
            new (bool, int)[] { (false, 16), (false, 25), (false, 41), (false, 48), (true, 46), (true, 37), (true, 21), (true, 14), },
            new (bool, int)[] { (true, 17), (true, 26), (true, 42), (true, 49), (false, 47), (false, 38), (false, 22), (false, 15), },
            new (bool, int)[] { (true, 18), (true, 27), (true, 43), (true, 50), (true, 48), (false, 39), (false, 23), (true, 16), },
            new (bool, int)[] { (true, 19), (true, 28), (true, 44), (true, 51), (true, 49), (true, 40), (true, 24), (true, 17), },
            new (bool, int)[] { (true, 20), (true, 29), (true, 45), (true, 52), (true, 50), (true, 41), (true, 25), (true, 18), },
            new (bool, int)[] { (true, 21), (true, 30), (true, 46), (true, 53), (true, 51), (true, 42), (true, 26), (true, 19), },
            new (bool, int)[] { (true, 22), (true, 31), (true, 47), (true, 54), (true, 52), (true, 43), (true, 27), (true, 20), },
            new (bool, int)[] { (true, 23), (false, 32), (false, 48), (true, 55), (true, 53), (true, 44), (true, 28), (true, 21), },
            new (bool, int)[] { (false, 24), (false, 33), (false, 49), (false, 56), (true, 54), (true, 45), (true, 29), (true, 22), },
            new (bool, int)[] { (true, 25), (true, 34), (true, 50), (true, 57), (false, 55), (false, 46), (false, 30), (false, 23), },
            new (bool, int)[] { (true, 26), (true, 35), (true, 51), (true, 58), (true, 56), (false, 47), (false, 31), (true, 24), },
            new (bool, int)[] { (true, 27), (true, 36), (true, 52), (true, 59), (true, 57), (true, 48), (true, 32), (true, 25), },
            new (bool, int)[] { (true, 28), (true, 37), (true, 53), (true, 60), (true, 58), (true, 49), (true, 33), (true, 26), },
            new (bool, int)[] { (true, 29), (true, 38), (true, 54), (true, 61), (true, 59), (true, 50), (true, 34), (true, 27), },
            new (bool, int)[] { (true, 30), (true, 39), (true, 55), (true, 62), (true, 60), (true, 51), (true, 35), (true, 28), },
            new (bool, int)[] { (true, 31), (false, 40), (false, 56), (true, 63), (true, 61), (true, 52), (true, 36), (true, 29), },
            new (bool, int)[] { (false, 32), (false, 41), (false, 57), (false, 64), (true, 62), (true, 53), (true, 37), (true, 30), },
            new (bool, int)[] { (true, 33), (true, 42), (true, 58), (false, 65), (false, 63), (false, 54), (false, 38), (false, 31), },
            new (bool, int)[] { (true, 34), (true, 43), (true, 59), (false, 66), (false, 64), (false, 55), (false, 39), (true, 32), },
            new (bool, int)[] { (true, 35), (true, 44), (true, 60), (false, 67), (false, 65), (true, 56), (true, 40), (true, 33), },
            new (bool, int)[] { (true, 36), (true, 45), (true, 61), (false, 68), (false, 66), (true, 57), (true, 41), (true, 34), },
            new (bool, int)[] { (true, 37), (true, 46), (true, 62), (false, 69), (false, 67), (true, 58), (true, 42), (true, 35), },
            new (bool, int)[] { (true, 38), (true, 47), (true, 63), (false, 70), (false, 68), (true, 59), (true, 43), (true, 36), },
            new (bool, int)[] { (true, 39), (false, 48), (false, 64), (false, 71), (false, 69), (true, 60), (true, 44), (true, 37), },
            new (bool, int)[] { (false, 40), (false, 49), (false, 65), (false, 72), (false, 70), (true, 61), (true, 45), (true, 38), },
            new (bool, int)[] { (true, 41), (true, 50), (false, 66), (false, 73), (false, 71), (false, 62), (false, 46), (false, 39), },
            new (bool, int)[] { (true, 42), (true, 51), (false, 67), (false, 74), (false, 72), (false, 63), (false, 47), (true, 40), },
            new (bool, int)[] { (true, 43), (true, 52), (false, 68), (false, 75), (false, 73), (false, 64), (true, 48), (true, 41), },
            new (bool, int)[] { (true, 44), (true, 53), (false, 69), (false, 76), (false, 74), (false, 65), (true, 49), (true, 42), },
            new (bool, int)[] { (true, 45), (true, 54), (false, 70), (false, 77), (false, 75), (false, 66), (true, 50), (true, 43), },
            new (bool, int)[] { (true, 46), (true, 55), (false, 71), (false, 78), (false, 76), (false, 67), (true, 51), (true, 44), },
            new (bool, int)[] { (true, 47), (false, 56), (false, 72), (false, 79), (false, 77), (false, 68), (true, 52), (true, 45), },
            new (bool, int)[] { (false, 48), (false, 57), (false, 73), (false, 80), (false, 78), (false, 69), (true, 53), (true, 46), },
        };

        public static readonly bool[][] pawnCaptureTable =
        {
            new bool[] { false, true, },
            new bool[] { true, true, },
            new bool[] { true, true, },
            new bool[] { true, true, },
            new bool[] { true, true, },
            new bool[] { true, true, },
            new bool[] { true, true, },
            new bool[] { true, false, },
            new bool[] { false, true, },
            new bool[] { true, true, },
            new bool[] { true, true, },
            new bool[] { true, true, },
            new bool[] { true, true, },
            new bool[] { true, true, },
            new bool[] { true, true, },
            new bool[] { true, false, },
            new bool[] { false, true, },
            new bool[] { true, true, },
            new bool[] { true, true, },
            new bool[] { true, true, },
            new bool[] { true, true, },
            new bool[] { true, true, },
            new bool[] { true, true, },
            new bool[] { true, false, },
            new bool[] { false, true, },
            new bool[] { true, true, },
            new bool[] { true, true, },
            new bool[] { true, true, },
            new bool[] { true, true, },
            new bool[] { true, true, },
            new bool[] { true, true, },
            new bool[] { true, false, },
            new bool[] { false, true, },
            new bool[] { true, true, },
            new bool[] { true, true, },
            new bool[] { true, true, },
            new bool[] { true, true, },
            new bool[] { true, true, },
            new bool[] { true, true, },
            new bool[] { true, false, },
            new bool[] { false, true, },
            new bool[] { true, true, },
            new bool[] { true, true, },
            new bool[] { true, true, },
            new bool[] { true, true, },
            new bool[] { true, true, },
            new bool[] { true, true, },
            new bool[] { true, false, },
            new bool[] { false, true, },
            new bool[] { true, true, },
            new bool[] { true, true, },
            new bool[] { true, true, },
            new bool[] { true, true, },
            new bool[] { true, true, },
            new bool[] { true, true, },
            new bool[] { true, false, },
            new bool[] { false, true, },
            new bool[] { true, true, },
            new bool[] { true, true, },
            new bool[] { true, true, },
            new bool[] { true, true },
            new bool[] { true, true },
            new bool[] { true, true },
            new bool[] { true, false }
        };

        public static readonly int[] dstToCentre = {
            6, 5, 4, 3, 3, 4, 5, 6,
            5, 4, 3, 2, 2, 3, 4, 5,
            4, 3, 2, 1, 1, 2, 3, 4,
            3, 2, 1, 0, 0, 1, 2, 3,
            3, 2, 1, 0, 0, 1, 2, 3,
            4, 3, 2, 1, 1, 2, 3, 4,
            5, 4, 3, 2, 2, 3, 4, 5,
            6, 5, 4, 3, 3, 4, 5, 6,
            };

        public static readonly (ulong, ulong)[] PassedPawnMasks = {
(0x0303030303030303UL, 0x0303030303030300UL),
(0x0707070707070707UL, 0x0707070707070700UL),
(0x0e0e0e0e0e0e0e0eUL, 0x0e0e0e0e0e0e0e00UL),
(0x1c1c1c1c1c1c1c1cUL, 0x1c1c1c1c1c1c1c00UL),
(0x3838383838383838UL, 0x3838383838383800UL),
(0x7070707070707070UL, 0x7070707070707000UL),
(0xe0e0e0e0e0e0e0e0UL, 0xe0e0e0e0e0e0e000UL),
(0xc0c0c0c0c0c0c0c0UL, 0xc0c0c0c0c0c0c000UL),
(0x0000000000000003UL, 0x0303030303030000UL),
(0x0000000000000007UL, 0x0707070707070000UL),
(0x000000000000000eUL, 0x0e0e0e0e0e0e0000UL),
(0x000000000000001cUL, 0x1c1c1c1c1c1c0000UL),
(0x0000000000000038UL, 0x3838383838380000UL),
(0x0000000000000070UL, 0x7070707070700000UL),
(0x00000000000000e0UL, 0xe0e0e0e0e0e00000UL),
(0x00000000000000c0UL, 0xc0c0c0c0c0c00000UL),
(0x0000000000000303UL, 0x0303030303000000UL),
(0x0000000000000707UL, 0x0707070707000000UL),
(0x0000000000000e0eUL, 0x0e0e0e0e0e000000UL),
(0x0000000000001c1cUL, 0x1c1c1c1c1c000000UL),
(0x0000000000003838UL, 0x3838383838000000UL),
(0x0000000000007070UL, 0x7070707070000000UL),
(0x000000000000e0e0UL, 0xe0e0e0e0e0000000UL),
(0x000000000000c0c0UL, 0xc0c0c0c0c0000000UL),
(0x0000000000030303UL, 0x0303030300000000UL),
(0x0000000000070707UL, 0x0707070700000000UL),
(0x00000000000e0e0eUL, 0x0e0e0e0e00000000UL),
(0x00000000001c1c1cUL, 0x1c1c1c1c00000000UL),
(0x0000000000383838UL, 0x3838383800000000UL),
(0x0000000000707070UL, 0x7070707000000000UL),
(0x0000000000e0e0e0UL, 0xe0e0e0e000000000UL),
(0x0000000000c0c0c0UL, 0xc0c0c0c000000000UL),
(0x0000000003030303UL, 0x0303030000000000UL),
(0x0000000007070707UL, 0x0707070000000000UL),
(0x000000000e0e0e0eUL, 0x0e0e0e0000000000UL),
(0x000000001c1c1c1cUL, 0x1c1c1c0000000000UL),
(0x0000000038383838UL, 0x3838380000000000UL),
(0x0000000070707070UL, 0x7070700000000000UL),
(0x00000000e0e0e0e0UL, 0xe0e0e00000000000UL),
(0x00000000c0c0c0c0UL, 0xc0c0c00000000000UL),
(0x0000000303030303UL, 0x0303000000000000UL),
(0x0000000707070707UL, 0x0707000000000000UL),
(0x0000000e0e0e0e0eUL, 0x0e0e000000000000UL),
(0x0000001c1c1c1c1cUL, 0x1c1c000000000000UL),
(0x0000003838383838UL, 0x3838000000000000UL),
(0x0000007070707070UL, 0x7070000000000000UL),
(0x000000e0e0e0e0e0UL, 0xe0e0000000000000UL),
(0x000000c0c0c0c0c0UL, 0xc0c0000000000000UL),
(0x0000030303030303UL, 0x0300000000000000UL),
(0x0000070707070707UL, 0x0700000000000000UL),
(0x00000e0e0e0e0e0eUL, 0x0e00000000000000UL),
(0x00001c1c1c1c1c1cUL, 0x1c00000000000000UL),
(0x0000383838383838UL, 0x3800000000000000UL),
(0x0000707070707070UL, 0x7000000000000000UL),
(0x0000e0e0e0e0e0e0UL, 0xe000000000000000UL),
(0x0000c0c0c0c0c0c0UL, 0xc000000000000000UL),
(0x0003030303030303UL, 0x0303030303030303UL),
(0x0007070707070707UL, 0x0707070707070707UL),
(0x000e0e0e0e0e0e0eUL, 0x0e0e0e0e0e0e0e0eUL),
(0x001c1c1c1c1c1c1cUL, 0x1c1c1c1c1c1c1c1cUL),
(0x0038383838383838UL, 0x3838383838383838UL),
(0x0070707070707070UL, 0x7070707070707070UL),
(0x00e0e0e0e0e0e0e0UL, 0xe0e0e0e0e0e0e0e0UL),
(0x00c0c0c0c0c0c0c0UL, 0xc0c0c0c0c0c0c0c0UL),
};

        public static readonly ulong[] IsolatedPawnMasks = {
0x0202020202020202UL,
0x0505050505050505UL,
0x0a0a0a0a0a0a0a0aUL,
0x1414141414141414UL,
0x2828282828282828UL,
0x5050505050505050UL,
0xa0a0a0a0a0a0a0a0UL,
0x4040404040404040UL,
};

        public static ulong[,] RayMasks = {
{ 0, 72340172838076672, 0, 254, 0, 9241421688590303744, 0, 0, },
{ 0, 144680345676153344, 1, 252, 0, 36099303471055872, 0, 256, },
{ 0, 289360691352306688, 3, 248, 0, 141012904183808, 0, 66048, },
{ 0, 578721382704613376, 7, 240, 0, 550831656960, 0, 16909312, },
{ 0, 1157442765409226752, 15, 224, 0, 2151686144, 0, 4328785920, },
{ 0, 2314885530818453504, 31, 192, 0, 8404992, 0, 1108169199616, },
{ 0, 4629771061636907008, 63, 128, 0, 32768, 0, 283691315109888, },
{ 0, 9259542123273814016, 127, 0, 0, 0, 0, 72624976668147712, },
{ 1, 72340172838076416, 0, 65024, 0, 4620710844295151616, 2, 0, },
{ 2, 144680345676152832, 256, 64512, 1, 9241421688590303232, 4, 65536, },
{ 4, 289360691352305664, 768, 63488, 2, 36099303471054848, 8, 16908288, },
{ 8, 578721382704611328, 1792, 61440, 4, 141012904181760, 16, 4328783872, },
{ 16, 1157442765409222656, 3840, 57344, 8, 550831652864, 32, 1108169195520, },
{ 32, 2314885530818445312, 7936, 49152, 16, 2151677952, 64, 283691315101696, },
{ 64, 4629771061636890624, 16128, 32768, 32, 8388608, 128, 72624976668131328, },
{ 128, 9259542123273781248, 32512, 0, 64, 0, 0, 145249953336262656, },
{ 257, 72340172838010880, 0, 16646144, 0, 2310355422147510272, 516, 0, },
{ 514, 144680345676021760, 65536, 16515072, 256, 4620710844295020544, 1032, 16777216, },
{ 1028, 289360691352043520, 196608, 16252928, 513, 9241421688590041088, 2064, 4328521728, },
{ 2056, 578721382704087040, 458752, 15728640, 1026, 36099303470530560, 4128, 1108168671232, },
{ 4112, 1157442765408174080, 983040, 14680064, 2052, 141012903133184, 8256, 283691314053120, },
{ 8224, 2314885530816348160, 2031616, 12582912, 4104, 550829555712, 16512, 72624976666034176, },
{ 16448, 4629771061632696320, 4128768, 8388608, 8208, 2147483648, 32768, 145249953332068352, },
{ 32896, 9259542123265392640, 8323072, 0, 16416, 0, 0, 290499906664136704, },
{ 65793, 72340172821233664, 0, 4261412864, 0, 1155177711056977920, 132104, 0, },
{ 131586, 144680345642467328, 16777216, 4227858432, 65536, 2310355422113955840, 264208, 4294967296, },
{ 263172, 289360691284934656, 50331648, 4160749568, 131328, 4620710844227911680, 528416, 1108101562368, },
{ 526344, 578721382569869312, 117440512, 4026531840, 262657, 9241421688455823360, 1056832, 283691179835392, },
{ 1052688, 1157442765139738624, 251658240, 3758096384, 525314, 36099303202095104, 2113664, 72624976397598720, },
{ 2105376, 2314885530279477248, 520093696, 3221225472, 1050628, 141012366262272, 4227072, 145249952795197440, },
{ 4210752, 4629771060558954496, 1056964608, 2147483648, 2101256, 549755813888, 8388608, 290499905590394880, },
{ 8421504, 9259542121117908992, 2130706432, 0, 4202512, 0, 0, 580999811180789760, },
{ 16843009, 72340168526266368, 0, 1090921693184, 0, 577588851233521664, 33818640, 0, },
{ 33686018, 144680337052532736, 4294967296, 1082331758592, 16777216, 1155177702467043328, 67637280, 1099511627776, },
{ 67372036, 289360674105065472, 12884901888, 1065151889408, 33619968, 2310355404934086656, 135274560, 283673999966208, },
{ 134744072, 578721348210130944, 30064771072, 1030792151040, 67240192, 4620710809868173312, 270549120, 72624942037860352, },
{ 269488144, 1157442696420261888, 64424509440, 962072674304, 134480385, 9241421619736346624, 541097984, 145249884075720704, },
{ 538976288, 2314885392840523776, 133143986176, 824633720832, 268960770, 36099165763141632, 1082130432, 290499768151441408, },
{ 1077952576, 4629770785681047552, 270582939648, 549755813888, 537921540, 140737488355328, 2147483648, 580999536302882816, },
{ 2155905152, 9259541571362095104, 545460846592, 0, 1075843080, 0, 0, 1161999072605765632, },
{ 4311810305, 72339069014638592, 0, 279275953455104, 0, 288793326105133056, 8657571872, 0, },
{ 8623620610, 144678138029277184, 1099511627776, 277076930199552, 4294967296, 577586652210266112, 17315143744, 281474976710656, },
{ 17247241220, 289356276058554368, 3298534883328, 272678883688448, 8606711808, 1155173304420532224, 34630287488, 72620543991349248, },
{ 34494482440, 578712552117108736, 7696581394432, 263882790666240, 17213489152, 2310346608841064448, 69260574720, 145241087982698496, },
{ 68988964880, 1157425104234217472, 16492674416640, 246290604621824, 34426978560, 4620693217682128896, 138521083904, 290482175965396992, },
{ 137977929760, 2314850208468434944, 34084860461056, 211106232532992, 68853957121, 9241386435364257792, 277025390592, 580964351930793984, },
{ 275955859520, 4629700416936869888, 69269232549888, 140737488355328, 137707914242, 36028797018963968, 549755813888, 1161928703861587968, },
{ 551911719040, 9259400833873739776, 139637976727552, 0, 275415828484, 0, 0, 2323857407723175936, },
{ 1103823438081, 72057594037927936, 0, 71494644084506624, 0, 144115188075855872, 2216338399296, 0, },
{ 2207646876162, 144115188075855872, 281474976710656, 70931694131085312, 1099511627776, 288230376151711744, 4432676798592, 72057594037927936, },
{ 4415293752324, 288230376151711744, 844424930131968, 69805794224242688, 2203318222848, 576460752303423488, 8865353596928, 144115188075855872, },
{ 8830587504648, 576460752303423488, 1970324836974592, 67553994410557440, 4406653222912, 1152921504606846976, 17730707128320, 288230376151711744, },
{ 17661175009296, 1152921504606846976, 4222124650659840, 63050394783186944, 8813306511360, 2305843009213693952, 35461397479424, 576460752303423488, },
{ 35322350018592, 2305843009213693952, 8725724278030336, 54043195528445952, 17626613022976, 4611686018427387904, 70918499991552, 1152921504606846976, },
{ 70644700037184, 4611686018427387904, 17732923532771328, 36028797018963968, 35253226045953, 9223372036854775808, 140737488355328, 2305843009213693952, },
{ 141289400074368, 9223372036854775808, 35747322042253312, 0, 70506452091906, 0, 0, 4611686018427387904, },
{ 282578800148737, 0, 0, 18302628885633695744, 0, 0, 567382630219904, 0, },
{ 565157600297474, 0, 72057594037927936, 18158513697557839872, 281474976710656, 0, 1134765260439552, 0, },
{ 1130315200594948, 0, 216172782113783808, 17870283321406128128, 564049465049088, 0, 2269530520813568, 0, },
{ 2260630401189896, 0, 504403158265495552, 17293822569102704640, 1128103225065472, 0, 4539061024849920, 0, },
{ 4521260802379792, 0, 1080863910568919040, 16140901064495857664, 2256206466908160, 0, 9078117754732544, 0, },
{ 9042521604759584, 0, 2233785415175766016, 13835058055282163712, 4512412933881856, 0, 18155135997837312, 0, },
{ 18085043209519168, 0, 4539628424389459968, 9223372036854775808, 9024825867763968, 0, 36028797018963968, 0, },
{ 36170086419038336, 0, 9151314442816847872, 0, 18049651735527937, 0, 0, 0, },
 };

        static PrecomputedMoveData() { }
    }
}